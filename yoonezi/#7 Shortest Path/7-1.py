# 방문 회사원 A는 1번 회사에서 출발하여 k번 회사를 방문한 뒤에 x번 회사로 가는 것이 목표

# 아이디어 :
#     1. 전형적인 최단 거리 문제, 최단거리 알고리즘 사용하여 해결
#     2. n의 크기가 최대 100이므로 "플로이드 워셜 알고리즘" 이용해도 효율적으로 해결 가능
#     3. 플로이드 워셜 알고리즘을 수행한 뒤에 (1번 노드에서 x까지의 최단거리 + x에서 k까지의 최단거리)를 계산하여 출력하믄 됨


# 구현 순서:
#     1. 노드의 개수 및 간선의 개수 입력 받기
#     2. 2차원 리스트 만들고, 모든값을 무한으로 초기화
#     3. 자기 자신으로 가는 비용은 0으로 초기화
#     4. 각 간선에 대한 정보 입력 받고, 그 값으로 초기화
#     5. 거쳐갈 노드 x와 최종 목적지 노드 k 입력 받기
#     6. 플로이드 워셜 알골리즘 수행
#     7. 수행된 결과 출력

INF = int(1e9)

# 노드의 개수 및 간선의 개수 입력 받기
n, m = map(int, input().split())
# 2차원 리스트(그래프 표현)를 만들고, 모든 값을 무한으로 초기화
# n + 1 하는 이유 ? : 노드의 순서에 맞게 하려고 // 1이면 1노드 
graph = [[INF] * (n + 1) for _ in range(n + 1)]
# print(graph)

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0
    
# 각 간선에 대한 정보를 입력 받아, 그 값으로 초기화
for _ in range(m):
    # A와 B가 서로에게 가는 비용은 1이라고 설정
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1
    
# 거쳐 갈 노드 x와 최종 목적지 노드 k를 입력받기
x, k = map(int, input().split())

# 점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n + 1):
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] =  min(graph[a][b], graph[a][k] + graph[k][b])

# 수행된 결과 출력
distance = graph[1][k] + graph[k][x]

# 도달할 수 없는 경우, -1을 출력
if distance >= INF:
    print("-1")
# 도달할 수 있으면, 최단거리 출력
else:
    print(distance)